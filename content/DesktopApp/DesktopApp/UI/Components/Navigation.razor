@inject NavigationManager NavigationManager

@implements IDisposable

<div class="min-h-full">
  <nav class="bg-gray-800/60 shadow-sm">
    <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
      <div class="flex h-10 justify-between">
        <div class="flex">
          <div class="flex flex-shrink-0 items-center">
          </div>
          <div class="sm:-my-px sm:ml-6 flex sm:space-x-8">
            @foreach (var item in Items)
            {
              var uri = new Uri(NavigationManager.Uri);
              var path = uri.AbsolutePath;
              var isFocused = item.ExactMatch ? path == item.Target : path.StartsWith(item.Target);

              if (isFocused)
              {
                <a href="@item.Target"
                   class="border-indigo-500 text-white inline-flex items-center border-b-2 px-1 pt-1 text-sm font-medium"
                   aria-current="page">
                  @if (!string.IsNullOrEmpty(item.Icon))
                  {
                    <i class="@item.Icon me-2"></i>
                  }
                  <span>
                    @item.Name
                  </span>
                </a>
              }
              else
              {
                <a href="@item.Target"
                   class="border-transparent text-gray-500 hover:border-primary-500 hover:text-white inline-flex items-center border-b-2 px-1 pt-1 text-sm font-medium"
                   aria-current="page">
                  @if (!string.IsNullOrEmpty(item.Icon))
                  {
                    <i class="@item.Icon me-2"></i>
                  }
                  <span>
                    @item.Name
                  </span>
                </a>
              }
            }
          </div>
        </div>
      </div>
    </div>
  </nav>

  <div class="py-10 mx-auto max-w-7xl sm:px-6 lg:px-8">
    @ChildContent
  </div>
</div>

@code
{
  [Parameter] public RenderFragment ChildContent { get; set; }

  private readonly List<NavigationItem> Items = new();

  protected override void OnInitialized()
  {
    NavigationManager.LocationChanged += OnNavigated;
    
    Items.Add(new()
    {
      Name = "Overview",
      Icon = "icon-chart-no-axes-gantt",
      Target = "/",
      ExactMatch = true
    });
    
    Items.Add(new()
    {
      Name = "Counter",
      Icon = "icon-radical",
      Target = "/counter"
    });
  }

  private void OnNavigated(object? sender, LocationChangedEventArgs e)
  {
    StateHasChanged();
  }

  public void Dispose()
  {
    NavigationManager.LocationChanged -= OnNavigated;
  }
  
  struct NavigationItem
  {
    public string Name { get; set; }
    public string? Icon { get; set; }
    public string Target { get; set; }
    public bool ExactMatch { get; set; }
  }
}
