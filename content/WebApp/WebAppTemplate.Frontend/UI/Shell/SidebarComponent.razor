@inherits MoonCore.Blazor.FlyonUi.Drawers.DrawerBase

@inject NavigationManager Navigation

@implements IDisposable

@{
    var url = new Uri(Navigation.Uri);
}

<div class="drawer-header">
    <div class="flex items-center gap-3">
        <div class="avatar">
            <img src="/placeholder.jpg" alt="Icon" class="size-8"/>
        </div>
        <h3 class="drawer-title text-xl font-semibold">WebAppTemplate</h3>
    </div>
</div>
<div class="drawer-body px-2.5">
    <ul class="menu menu-sm p-0 bg-transparent">
        @foreach (var group in Items)
        {
            if (!string.IsNullOrEmpty(group.Key))
            {
                <li>
                    <div class="divider">@group.Key</div>
                </li>
            }

            foreach (var item in group.Value)
            {
                var isActive = item.RequiresExactMatch
                    ? url.LocalPath == item.Path
                    : url.LocalPath.StartsWith(item.Path);

                <li>
                    <a href="@item.Path" class="@(isActive ? "menu-active" : "")">
                        <i class="@item.Icon text-lg"></i>
                        @item.Name
                    </a>
                </li>
            }
        }
    </ul>
</div>
<div class="drawer-footer p-2.5">
    <div
        class="flex w-full justify-between items-center px-2 py-2.5 gap-6 rounded-lg text-left text-base/6 font-medium sm:py-2 sm:text-sm/5 text-base-content">
        <div class="flex min-w-0 items-center gap-3">
            <span class="inline-grid shrink-0 align-middle">
                <img class="h-8 rounded-full"
                     src="/placeholder.jpg"
                     alt=""/>
            </span>
            <div class="min-w-0">
                <div class="block truncate text-sm/5 font-medium text-base-content">
                    @Username
                </div>
                <div class="block truncate text-xs/5 font-normal text-base-content/40">
                    @Email
                </div>
            </div>
        </div>
        <a href="#" @onclick:preventDefault @onclick="LogoutAsync" class="flex items-center">
            <i class="icon-log-out text-lg"></i>
        </a>
    </div>
</div>

@code
{
    private Dictionary<string, SidebarItem[]> Items = new();

    private string Username = "demouser";
    private string Email = "user@demo.email";

    protected override void OnInitialized()
    {
        var sidebarItems = new List<SidebarItem>()
        {
            new()
            {
                Name = "Dashboard",
                Path = "/",
                Icon = "icon-layout-dashboard",
                RequiresExactMatch = true
            }
        };

        Items = sidebarItems
            //.Where(x => x.Permission == null || (x.Permission != null && IdentityService.HasPermission(x.Permission)))
            .GroupBy(x => x.Group ?? "")
            .OrderByDescending(x => string.IsNullOrEmpty(x.Key))
            .ToDictionary(x => x.Key, x => x.OrderBy(y => y.Priority).ToArray());

        Navigation.LocationChanged += OnNavigated;
    }

    private async void OnNavigated(object? sender, LocationChangedEventArgs e)
    {
        // No async void without try catch to prevent hard app crashes when async task fails
        
        try
        {
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception)
        {
            // ignored
        }
    }

    private Task LogoutAsync()
    {
        Navigation.NavigateTo("/api/auth/logout", true);
        return Task.CompletedTask;
    }

    record SidebarItem
    {
        public string? Group { get; set; }
        public int Priority { get; set; }
        public string Icon { get; set; }
        public string Path { get; set; }
        public string Name { get; set; }
        public bool RequiresExactMatch { get; set; }
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= OnNavigated;
    }
}
